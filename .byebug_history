c
@instance_options[:geocode]
c
geocode
c
self.object.instance_options
self.object
self
@geocode
@instance_options
instance_options
c
instance_options
serialization_options
erialization_options
@instance_options
self
self.object
self.object.geocode
self.object
self
c
@destination.methods
@destination.joins(geocode)
@destination.class
@destination
@destination.merge({"lol": "lol"})
@destination.merger({"lol": "lol"})
@destination
@destination.is_a?(hash)
@destination.is_a?(object)
@destination.class
@destination.object
@destination
@destination.type
@destination.class
@destination
@destination.class
@destination.get_geocode.data.class
@destination.get_geocode.data
@destination.get_geocode
@destination
c
geocode.data
geocode.data.lat
geocode.data
geocode
c
self
c
self
@destination.geocode
c
@destination.name
@destination.geocode
@destination
c
Geocoder.search(@destination.name).find{|ele| ele.country.downcase === @destination.country_name.downcase}
Geocoder.search(@destination.name)
Geocoder.search(@destination..name)
@destination.country_name
@destination.geocode
@destination 
c
self.object
self
Destination.all.first.country_name
Destination.all.first.name
Destination.all.first.geocode
c
Destination.all.first.geocode
Destination.all.first.methods
c
Destination.all.first.methods
Destination.all.first
Destination.all.first.hello
Destination.all.first.geocode
c
Destination.all.first.geocode
Destination.all.first
Destination.all.first.geocode
Destination.all.first
c
Destination.all.first.object_id
Destination.all.first.object_od
Destination.all.first.geocode
Destination.all.first
Destination.all.first.geocode
Destination.all.first
Destination.all
self
c
continue
c
Geocoder.search(self.object.name).find{|ele| ele.country.downcase === self.object.country_name.downcase}.lat
Geocoder.search(self.object.name).find{|ele| ele.country.downcase === self.object.country_name.downcase}.at
Geocoder.search(self.object.name).find{|ele| ele.country.downcase === self.object.country_name.downcase}["lat"]
Geocoder.search(self.object.name).find{|ele| ele.country.downcase === self.object.country_name.downcase}
Geocoder.search(self.object.name).find{|ele| ele.country.downcase === self.object.country_name.downcase}.lat
Geocoder.search(self.object.name).find{|ele| ele.country.downcase === self.object.country_name.downcase}.boundingbox
Geocoder.search(self.object.name).find{|ele| ele.country.downcase === self.object.country_name.downcase}
self
c
Geocoder.search(@destinations.first.name).find{|ele| ele.country.downcase === @destinations.first.country_name.downcase}c
Geocoder.search(@destinations.first.name).find{|ele| ele.country.downcase === @destinations.first.country_name.downcase}
Geocoder.search(@destinations.first.name).find(|ele| ele.country.downcase === @destinations.first.country_name.downcase)
Geocoder.search(@destinations.first.name).find(
Geocoder.search(@destinations.first.name).first.country
Geocoder.search(@destinations.first.name).first.address
Geocoder.search(@destinations.first.name).first
Geocoder.search(@destinations.first.name)
Geocoder.search(@destinations.first.name).first.coordinates
c
Geocoder.search(@destinations.first.name).first.coordinates
Geocoder.search(@destinations.first.name).first
Geocoder.search(@destinations.first.name)
@destinations.first.name
@destinations.first.address
@destinations.first
@destinations
Geocoder.search(@destinations.first.name).coordinates
Geocoder.search(@destinations.first.name).coordonates
Geocoder.search(@destinations.first.name)
@destinations.first.name
@destinations.first.address
@destinations.first
@destinations.firsy
@destinations
destinations
self
Destination.all.first.address
Destination.all.first
self
c
Destination.all.first.address
c
Destination.all.first.address
Destination.all.first.methods
Destination.all.first.address
c
Destination.all.first.methods
Destination.all.first.address
Destination.all.first
Destination.all
self
self.first
self
address
adress
c
continue
c
cc
c
Geocoder.search(self.object.name)
Geocoder.search(self.object.name
self.object.name
self.object
Geocoder.search("Paris")
self
self.all
self.object
